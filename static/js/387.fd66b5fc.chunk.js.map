{"version":3,"file":"static/js/387.fd66b5fc.chunk.js","mappings":"sMACAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,MAAMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAcC,UACvB,MAAM,KAAEC,SAAeR,EAAAA,EAAAA,IACnB,oCACAC,GAEJ,OAAOO,EAAKC,OAAO,EAGVC,EAAoBH,UAC7B,MAAM,KAAEC,SAAeR,EAAAA,EAAAA,IAAU,UAADW,OAClBC,GACVX,GAEJ,OAAOO,CAAI,EAGFK,EAAgBN,UACzB,MAAM,KAAEC,SAAeR,EAAAA,EAAAA,IAAU,SAADW,OACnBC,EAAE,YACXX,GAEJ,OAAOO,EAAKM,IAAI,EAGPC,EAAkBR,UAC3B,MAAM,KAAEC,SAAeR,EAAAA,EAAAA,IAAU,SAADW,OACnBC,EAAE,YACXX,GAEJ,OAAOO,EAAKC,OAAO,EAGVO,EAAoBT,UAC7B,MAAM,KAAEC,SAAeR,EAAAA,EAAAA,IAAU,sBAADW,OACVM,EAAI,8CACtBhB,GAEJ,OAAOO,CAAI,C,wGC/CR,MAAMU,EAAgBC,EAAAA,EAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uHAQ9BC,EAAcH,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wCAIvBG,EAAcL,EAAAA,EAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,oCAIvBK,EAAeP,EAAAA,EAAAA,GAASQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0BAIxBO,EAAcT,EAAAA,EAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,0B,aChBnC,MA2CA,EA3CgBS,KACZ,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KACjC,QAAEC,IAAYC,EAAAA,EAAAA,MAiBpB,OAfAC,EAAAA,EAAAA,YAAU,KACe7B,WACjB,IACI,MAAM8B,QAAetB,EAAAA,EAAAA,IAAgBmB,GAErCF,EAAWK,EAIf,CAFE,MAAOC,GACLC,QAAQD,MAAM,8BAA+BA,EACjD,GAGJE,EAAc,GACf,CAACN,KAGAO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAACvB,EAAa,CAAAyB,UACVF,EAAAA,EAAAA,KAACnB,EAAW,CAAAqB,SACE,IAAnBZ,EAAQa,QAAeC,EAAAA,EAAAA,MAAA,MAAAF,SAAA,CAAI,KAACF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,0BAAyB,QAC/CF,EAAAA,EAAAA,KAACjB,EAAW,CAAAmB,SACPZ,EAAQe,KAAIC,IAA8B,IAA7B,GAAEnC,EAAE,OAAEoC,EAAM,QAAEC,GAASF,EACjC,OACIF,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACAE,EAAAA,EAAAA,MAACnB,EAAY,CAAAiB,SAAA,CAAC,WAASK,MACvBP,EAAAA,EAAAA,KAACb,EAAW,CAAAe,SAAEM,MAFJrC,EAGJ,WASvB,C","sources":["api-service/trending-service.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4NGJmYmIyNTA2NmM5ZTJhNjhkNzA0NmFkNTgxYjBlYyIsInN1YiI6IjY1NmI0YTY5MDg1OWI0MDEzOTUxMmZhMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.JHtQht9lLzVGn8qQlSLZwC1_-cT8AoKj26qDOrlg0qc',\n  },\n};\n\nexport const getTrending = async () => {\n    const { data } = await axios.get(\n        'trending/movie/day?language=en-US',\n        options\n    );\n    return data.results;\n    };\n\nexport const getDetailInfoById = async (id) => {\n    const { data } = await axios.get(\n        `/movie/${id}`,\n        options\n    );\n    return data;\n}\n\nexport const getActorsList = async (id) => {\n    const { data } = await axios.get(\n        `movie/${id}/credits`,\n        options\n    );\n    return data.cast;\n}\n\nexport const getMovieReviews = async (id) => {\n    const { data } = await axios.get(\n        `movie/${id}/reviews`,\n        options\n    );\n    return data.results;\n}\n\nexport const SearchMovieByName = async (name) => {\n    const { data } = await axios.get(\n    `search/movie?query=${name}&include_adult=false&language=en-US&page=1`,\n        options\n    );\n    return data;\n}\n\n","import styled from \"@emotion/styled\";\n\nexport const GlobalSection = styled.section`\n    display: flex;\n    max-width: 1400px;\n    margin-right: auto;\n    margin-left: auto;\n    gap: 10px;\n`;\n\nexport const ReviewsList = styled.ul`\n  padding-left: 1rem; //10px\n`;\n\nexport const ReviewsItem = styled.li`\n  list-style-type: none;\n`;\n\nexport const ReviewsTitle = styled.h2`\n  color: grey;\n`;\n\nexport const ReviewsText = styled.p`\n  color: grey;\n`;","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from '../../api-service/trending-service';\nimport { GlobalSection, ReviewsList, ReviewsItem, ReviewsTitle, ReviewsText } from \"./Reviews.styled\";\n\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const fetchReviews = async () => {\n            try {\n                const result = await getMovieReviews(movieId);\n                // console.log('data: >>', result);\n                setReviews(result);\n                \n            } catch (error) {\n                console.error('Error fetching actors list:', error);\n            }\n        };\n\n        fetchReviews();\n    }, [movieId]);\n\n    return (\n        <>\n        <GlobalSection>\n            <ReviewsList>\n      {reviews.length === 0 ? <li> <p>Empty reviews details</p> </li> : (\n                <ReviewsItem>\n                    {reviews.map(({ id, author, content }) => {\n                        return (\n                            <div key={id}>\n                            <ReviewsTitle>Author: {author}</ReviewsTitle>\n                            <ReviewsText>{content}</ReviewsText>\n                            </div>\n                        );\n                        \n                    })}                    \n                </ReviewsItem>\n                )}\n            </ReviewsList>\n        </GlobalSection>\n            \n        </>\n    )\n}\n\nexport default Reviews;"],"names":["axios","options","method","headers","accept","Authorization","getTrending","async","data","results","getDetailInfoById","concat","id","getActorsList","cast","getMovieReviews","SearchMovieByName","name","GlobalSection","styled","_templateObject","_taggedTemplateLiteral","ReviewsList","_templateObject2","ReviewsItem","_templateObject3","ReviewsTitle","_templateObject4","ReviewsText","_templateObject5","Reviews","reviews","setReviews","useState","movieId","useParams","useEffect","result","error","console","fetchReviews","_jsx","_Fragment","children","length","_jsxs","map","_ref","author","content"],"sourceRoot":""}